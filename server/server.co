# server.co
# it's a server

{Gusto,config} = require.main.exports
Q = require \q
http = require \q-http
url = require \url
querystring = require \querystring
vm = require \vm
fs = require \fs
util = require \util

{Router,Errors,Loaders} = require "./router.co"


class Timer
	(req)->
		@id="#{process.pid} #{req.connection.remoteAddress} #{req.path}"
		@start = new Date
	end: ->
		@finish = new Date
		Gusto.debug @id+": "+(@finish-@start)+"ms"

class exports.Server
	@router = false
	readPost: (request)->
		if request.method is \POST then
			body <- request.body.read!.then
			querystring.parse body
		else Q.when {}
	serve: (request)->
		time = new Timer request
		# request's finished, do our thing
		get = url.parse request.url,true .query
		post = @readPost request

		data = post.then (res)->
			res <<< get

		try
			Loaders.controllers.traverse!.then ->
				Gusto.debug ..router.route request.path
			.end!
			
		body: [util.inspect request]
		status: 200
		onclose: time.~end

		# there's a match!
		# finish = res.end
		# res.end = ->
		# 	# done timing
		# 	console.timeEnd timerId
		# 	finish.apply res,arguments

		# match[0] match[0].params <<< res.params
	
	->
		..router = new Router if ..router is false
		@server = http.Server @~serve

	go: (port,host)->
		Gusto.log "#{process.pid} listening on %s:#port",(host or "*")
		@server.listen port,host