# server.co
# it's a server

{Gusto,config} = require.main.exports
Q = require \q
http = require \q-http
url = require \url
querystring = require \querystring
vm = require \vm
fs = require \fs
util = require \util

methods = [
	\*
	\HEAD
	\GET
	\POST
	\PUT
	\TRACE
	\DELETE
	\OPTIONS
	\PATCH
]

class Timer
	(req)->
		console.time @id="#{process.pid} #{req.connection.remoteAddress} #{req.path}"
	end: ->
		console.timeEnd @id

class Gusto.Server
	@compiledRoutes = false
	readPost: (request)->
		if request.method is \POST then
			body <- request.body.read!.then
			querystring.parse body
		else Q.when {}
	serve: (request)->
		time = new Timer request
		# request's finished, do our thing
		get = url.parse request.url,true .query
		post = @readPost request

		data = post.then (res)->
			res <<< get

		body: [util.inspect request]
		status: 200
		onclose: time.~end

		# there's a match!
		# finish = res.end
		# res.end = ->
		# 	# done timing
		# 	console.timeEnd timerId
		# 	finish.apply res,arguments

		# match[0] match[0].params <<< res.params
	route: ->
		err, data <- fs.readFile config.routes
		throw err if err
		..compiledRoutes = data.toString!.split /[\n\r]/ .map (line)->
			# parse the routes file into an array with vm scripts
			line .= split "#" .shift!
			if line then
				parts = line.split /\s+/
				if parts.length > 2
					if parts[0] not of methods then
						throw new SyntaxError "Invalid HTTP method #{parts[0]}"
					parts[2] = vm.createScript parts[2],parts[1]
					parts
		.compact!
	->
		@route! if ..compiledRoutes is false
		@server = http.Server @~serve

	go: (port,host)->
		console.log "#{process.pid} listening on %s:%d",(host or "*"),port
		@server.listen port,host