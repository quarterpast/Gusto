# router.co
{Gusto,config} = require.main.exports
url = require \url
#instance = require "../mvc/instance.co"
staticRoute = require "./static.co"
redirect = require "./redirect.co"

class Gusto.Router
	compiled: []
	->
		err, data <- fs.readFile config.routes
		throw err if err
		@compiled = data.toString!.split /[\n\r]/ .map (line)->
			# parse the routes file into an array with vm scripts
			line .= split "#" .shift! # remove "comments"
			if line then
				parts = line.split /\s+/
				if parts.length > 2
					if parts[0] not of methods then
						throw new SyntaxError "Invalid HTTP method #{parts[0]}"
					out = {}
					out[\method,\path,\id,...\args] = parts
					return out

		.compact!
	route: (url)->
		for route of @compiled
			return unless route.method is "*" or route.method is req.method
			# method matches
			reg = new RegExp do
				# build a regexp from the placeholders in the url
				"^"+route.path
				.replace do
					/\{([\w]+?)(\|[\s\S]+?)?(\/)?\}/g,
					(m,key,sub,slash) ->
						keys.push key
						if sub # route specifies its own regexp
							sub.substr(1);
						else if slash is '/'
							"((/?[^/?*:;{}\\\\]+)+)"
						else "([\\w0-9.-]+)"
				+"$"

			if reg.test uri.pathname
				uri.pathname.replace reg,(m)->
					# grab variables from the url
					for i from 1 to keys.length then
						params[keys[i-1]] = arguments[i]

				env = ^list.controllers <<< params <<< static: staticRoute,redirect: redirect

				try
					# evaluate the action id
					action = route[2].runInNewContext env
				catch
					if e.name is \"TypeError"
						return # doesn't exist
					else throw e

				return null unless action
				id = action.id
				bits = id.split '.'

				run = if id of [# give it the right context
					"static.file",
					"static.dir",
					"static.url",
					"static.template",
					"redirect"
				] then
					action.fill req,res,route[3]
				else
					methods = instance res,bits[0],bits.path
					action.bind action.context <<< methods

				run <<< {params}