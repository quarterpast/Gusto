# router.co
{Gusto,config} = require.main.exports
{Controller} = require "../mvc/controller.co"
{Loader} = require "../mvc/loader.co"
url = require \url
vm = require \vm

exports.Loaders = 
	controllers: new Loader config.controllerPath

methods = [
	\*
	\HEAD
	\GET
	\POST
	\PUT
	\TRACE
	\DELETE
	\OPTIONS
	\PATCH
]

class Script
	(@text)->
		@script = vm.createScript @compiled = Coco.compile @text,{+bare}
	runInNewContext: (...args)->
		@script.~runInNewContext ...args
	runInContext: (...args)->
		@script.~runInContext ...args
	runInThisContext: (...args)->
		@script.~runInThisContext ...args

exports.Errors = {}
class exports.Errors.InvalidMethod extends Error
	(m)-> super "Invalid HTTP method #m"
class exports.Errors.NoAction extends Error
	-> super "No such action #it"
class exports.Errors.Generic extends Error
	-> super "Something went wrong somewhere for some reason. Maybe."

class exports.Router
	compiled: []
	->
		err, data <~ fs.readFile config.routes
		throw err if err
		@compiled = for line of data.toString!.split /[\n\r]/
			# parse the routes file into an array with vm scripts
			line .= split "#" .shift! # remove "comments"
			if line then
				parts = line.split /\s+/
				if parts.length > 2
					if parts[0] not of methods
						throw new exports.Errors.InvalidMethod parts[0]
					parts[\method,\path,\id,...\args] = parts
					parts.id = new Script '"'+parts.id+'"'
					parts.args = new Script parts.args.join " "
					parts

	route: (req)->
		uri = url.parse req.path

		for route of @compiled
			continue unless route.method is "*" or route.method is req.method
			# method matches
			keys = []
			pieces = route.path.replace do
				/#\{([\w]+?)(\|[\s\S]+?)?(\/)?\}/g,
				(m,key,sub,slash) ->
					keys.push key
					if sub # route specifies its own regexp
						sub.substr(1);
					else if slash is '/'
						"((/?[^/?*:;{}\\\\]+)+)"
					else "([\\w0-9.-]+)"
			reg = //^#{pieces}$//

			if reg.test uri.pathname
				params = {}
				uri.pathname.replace reg,(m,...vals)->
					# grab variables from the url
					for key,i of keys then
						params[key] = vals[i]

				# evaluate the action id
				continue unless id = route.id.runInNewContext params
				continue unless action = Controller.byId id
				return {
					action
					params
				}