# router.co
# a filter function. takes a route, returns an action (or nothing)
url = require \url
list = require "../mvc/list.co"
instance = require "../mvc/instance.co"
staticRoute = require "./static.co"
redirect = require "./redirect.co"

module.exports = (req,res,route) ->
	params = {}
	keys = []
	uri = url.parse req.url,true

	if route[0] is "*" or route[0] is req.method
		# method matches
		reg = new RegExp do
			# build a regexp from the placeholders in the url
			"^"+route[1]
			.replace do
				/\{([\w]+?)(\|[\s\S]+?)?(\/)?\}/g,
				(m,key,sub,slash) ->
					keys.push key
					if sub # route specifies its own regexp
						sub.substr(1);
					else if slash is '/'
						"((/?[^/?*:;{}\\\\]+)+)"
					else "([\\w0-9.-]+)"
			+"$"

		if reg.test uri.pathname
			uri.pathname.replace reg,(m)->
				# grab variables from the url
				for i from 1 to keys.length then
					params[keys[i-1]] = arguments[i]

			env = ^list.controllers <<< params <<< static: staticRoute,redirect: redirect

			try
				# evaluate the action id
				action = route[2].runInNewContext env
			catch
				if e.name is \"TypeError"
					return # doesn't exist
				else throw e

			return null unless action
			id = action.id
			bits = id.split '.'

			run = if id of [# give it the right context
				"static.file",
				"static.dir",
				"static.url",
				"static.template",
				"redirect"
			] then
				action.fill req,res,route[3]
			else
				methods = instance res,bits[0],bits[1]
				action.bind action.context <<< methods

			run.params = params
			run
