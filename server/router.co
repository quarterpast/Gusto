# router.co
{Gusto,config} = require.main.exports
{Controller} = require "../mvc/controller.co"
url = require \url
vm = require \vm

methods = [
	\*
	\HEAD
	\GET
	\POST
	\PUT
	\TRACE
	\DELETE
	\OPTIONS
	\PATCH
]

class Script
	(@text)->
		@script = vm.createScript @compiled = Coco.compile @text
	runInNewContext: (...args)->
		@script.~runInNewContext ...args
	runInContext: (...args)->
		@script.~runInContext ...args
	runInThisContext: (...args)->
		@script.~runInThisContext ...args

exports.Errors = {}
class exports.Errors.InvalidMethod extends Error
	-> super "Invalid HTTP method"
class exports.Errors.NoAction extends Error
	-> super "No such action #it"
class exports.Errors.Generic extends Error
	-> super "Something went wrong somewhere for some reason. Maybe."

class exports.Router
	compiled: []
	->
		err, data <- fs.readFile config.routes
		throw err if err
		@compiled = data.toString!.split /[\n\r]/ .map (line)->
			# parse the routes file into an array with vm scripts
			line .= split "#" .shift! # remove "comments"
			if line then
				parts = line.split /\s+/
				if parts.length > 2
					if parts[0] not of methods then
						throw new SyntaxError "Invalid HTTP method #{parts[0]}"
					parts[\method,\path,\id,...\args] = parts
					parts.id = new Script '"'+parts.id+'"'
					parts.args = new Script parts.args.join " "
					return parts
			return {}

		.compact!
	route: (url)->
		for route of @compiled
			continue unless route.method is "*" or route.method is req.method

			# method matches
			reg = new RegExp do
				# build a regexp from the placeholders in the url
				"^"+route.path
				.replace do
					/#\{([\w]+?)(\|[\s\S]+?)?(\/)?\}/g,
					(m,key,sub,slash) ->
						keys.push key
						if sub # route specifies its own regexp
							sub.substr(1);
						else if slash is '/'
							"((/?[^/?*:;{}\\\\]+)+)"
						else "([\\w0-9.-]+)"
				+"$"

			if reg.test uri.pathname
				uri.pathname.replace reg,(m,...vals)->
					# grab variables from the url
					for key,i of keys then
						params[key] = vals[i]

				# evaluate the action id
				continue unless id = route.id.runInNewContext params
				continue unless action = Controller.byId id
				return {
					action
					params
				}