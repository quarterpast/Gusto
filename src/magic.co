Q = require \q
crypto = require \crypto
{Log} = require "./log"
{Server} = require "./server/server"

exports.async = -> it.async!
exports.future = -> it.future!

exports.SyncPromise = exports.async function SyncPromise pr
	return pr.then.sync pr

class exports.SyncStream
	$buffer: null
	(@read,length)~>
		off = 0
		@$buffer = new Buffer length or 1024
		@read.on \error, (e)-> throw e
		@read.on \data, (chunk)~>
			if chunk.length > @$buffer.length-off
				bigger = new Buffer @$buffer.length+1024
				@$buffer.copy bigger
				@$buffer = bigger
			
			chunk.copy @$buffer,off
			off += chunk.length

	out: exports.async ->
		@read.on.sync @read,"end"
		return @$buffer

class exports.FutureStream extends SyncStream
	-> super ...
	out: ->
		super.future this

exports.handle = (func)-> ->
	try
		func ...
	catch
		Log.error e.message
		console.log e.stack
		Server.hijack id, {
			body: [e.message]
			status: 500
		}