util = require \util
pathutil = require \path
{Walk,Reloader,Paths} = require "./loader"
{signal} = require "./signal"
{async} = require "../magic"
{Log} = require "../log"
Sync = require \sync

class ControllerSupport
	@instances = []
	(@controller,@action)->
		..instances.push this
		action.support = this
	call: (action,args)->
		...
	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		return [\implement!]

exports.ControllerLoader = (dir)->
	out = {}
	for file of Walk dir
		Reloader file, (exp)->
			for id,action of Paths exp
				out[id] = action
	return out


exports.Controller = (actions)->
	for r,action in actions
		action.bind new ControllerSupport this,action
	return actions

exports.Controller.views = (sys)->
	for cs of ControllerSupport.instances
		cs.views = sys

exports.action = (spec,func)->
	[func,spec] = if spec instanceof Function then [spec,{}] else [func,spec]

	out = (...args)->
		args .= 0 if @@length is 1 and typeof @@0 is \object
			
		for param,type in spec
			arg = args[param] or args.shift!
			pass[param] = arg
		return func.call pass,this

	out.expects = spec
	return out