util = require \util
pathutil = require \path
{Log,async} = require "../main"
{Renderer} = require "./renderer"

class exports.Controller
	->
		for k,v in this
			v.id = [k] unless k in exports.Controller.prototype
	@subclasses = []
	@byId = (id)->
		unless id instanceof Array then id /= '.'
		action = id.pop!
		return unless id.join('.') in @subclasses
		cont = @subclasses[id.join '.']
		if action in cont.prototype and action not in prototype
			return new cont!~[action]
	@prepareAll = ->
		@prepare id for id in @subclasses
	@prepare = (id)->
		sub = @subclasses[id]
		for action,fn in new sub
			if action in sub.prototype and action not in prototype
				path = (id,action)-> ((id / '.') + [action]).join '/'
				fn <<< {
					id
					path
					renderer: Renderer path id,action
				}

	@extended = (sub)->
		sub.id = if sub.id? then
			if typeof sub.id is \string then sub.id / '.'
			else if sub.id instanceof Array then sub.id
			else throw new TypeError "How is '#{sub.id}' an id?"
		else [sub.displayName]
		@prepare sub.id.join '.' if (sub.id.join '.') in @subclasses
		@subclasses[sub.id.join '.'] = sub
	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		$ = arguments.callee.caller
		rendered = if typeof action is \string then
			Renderer $.path $.id, action
		else
			args = action
			$.renderer
		return [rendered.runInNewContext args]