util = require \util
pathutil = require \path
{Loader} = require "./loader"
{Config,Log,async} = require "../main"
{Renderer} = require "./renderer"
Sync = require \sync

class ControllerSupport
	(@actions)->

	call: (action,args)->
		...
	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		$ = @@callee.caller
		rendered = if typeof action is \string then
			Renderer.resolve $.path $.id, action
		else
			args = action
			$.renderer
		return [rendered.toString!]

class exports.Controller
	(@actions)~>
		for r,action in actions
			action.bind new ControllerSupport actions


class exports.Controllers extends Loader
	(path)~> @ <<< superclass path

#exports.Controllers = new class 

exports.action = (spec,func)->
	[func,spec] = if spec instanceof Function then [spec,{}] else [func,spec]

	out = (...args)->
		args .= 0 if @@length is 1 and typeof @@0 is \object
			
		for param,type in spec
			arg = args[param] or args.shift!
			pass[param] = arg
		return func.call pass,this

	out.expects = spec
	return out