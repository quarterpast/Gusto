util = require \util
pathutil = require \path
{Loader} = require "./loader"
Q = require \q

class exports.Controller
	->
		for k,v in this
			v.id = [k] unless k in exports.Controller.prototype
	@subclasses = []
	@byId = (id)->
		unless id instanceof Array then id /= '.'
		action = id.pop!
		cont = @subclasses[id.join '.']
		if action in cont.prototype and action not in Controller.prototype
			return (new cont <<< {action, id})~[action]
	@prepare = ->
		for sub of @subclasses
			for action,fn in sub
				if action in sub.prototype and action not in Controller.prototype then
					sub.prototype[action].id = action
	@extended = (sub)-> 
		sub.id = if sub.id? then
			if typeof sub.id is \string then sub.id / '.'
			else if sub.id instanceof Array then sub.id
			else throw new TypeError "How is '#{sub.id}' an id?"
		else [sub.displayName]
		@subclasses[sub.id.join '.'] = sub
	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		[action, args ? {}] = [@action,action] unless typeof action is \string
		path = (@id + [action]).join "/"
		console.log arguments.callee.caller.id
		return [path]