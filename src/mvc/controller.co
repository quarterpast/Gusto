util = require \util
pathutil = require \path
{Loader} = require "./loader"
{Config,Log,async} = require "../main"
{Renderer} = require "./renderer"

exports.Controllers = new class Controllers extends Loader
	byId: (id)->
		unless id instanceof Array then id /= '.'
		part = id.shift!
		if id.length is 0 and @[part] instanceof Function
			@~[part] 
		else
			@@callee.call @[part],id
	->
		super Config.controllerPath, (ctrlrs)->
			p ctrlrs

class exports.Controller
	->
		for k,v in this
			v.id = [k] unless k in exports.Controller.prototype
	@register = (id)->
		sub = @subclasses[id]
		for action,fn in new sub
			if action in sub.prototype and action not in @prototype
				path = (id,action)-> ((id / '.') + [action]).join '/'
				fn <<< {
					id
					path
					renderer: Renderer path id,action
				}

	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		$ = @@callee.caller
		rendered = if typeof action is \string then
			Renderer $.path $.id, action
		else
			args = action
			$.renderer
		return [rendered.runInNewContext args]