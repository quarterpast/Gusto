util = require \util
pathutil = require \path
{Loader} = require "./loader"
{Config,Log,async} = require "../main"
{Renderer} = require "./renderer"
Sync = require \sync

exports.Controllers = new class Controllers extends Loader
	byId: (id)->
		obj = @out
		console.log obj
		unless id instanceof Array then id /= '.'
		while part = id.shift!
			#obj = new obj if id.length is 0
			obj = obj@[part]
		return obj if obj instanceof Function


	@register = (klass)->
		out = new klass
		for action,fn in out
			if action in klass.prototype and action not in @prototype
				path = (id,action)-> ((id / '.') + [action]).join '/'
				fn <<< {
					id
					path
					renderer: Renderer path id,action
				}
		return out

	function walk obj,cb
		for k,v in obj
			if typeof v is \object
				walk v,cb
			else
				cb v,k
	~> super (ctrlrs)->
		walk ctrlrs, Controllers.register
	run: ->super Config.controllerPath

class exports.Controller
	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		$ = @@callee.caller
		rendered = if typeof action is \string then
			Renderer $.path $.id, action
		else
			args = action
			$.renderer
		return [rendered.runInNewContext args]