util = require \util
pathutil = require \path
{Loader} = require "./loader"
{Config,Log,async} = require "../main"
{Renderer} = require "./renderer"
Sync = require \sync

class exports.Controller
	renderJSON: ->
		status: 200
		\content-type : "application/json"
		body: [JSON.stringify it]
	render: (action, args)->
		$ = @@callee.caller
		rendered = if typeof action is \string then
			Renderer $.path $.id, action
		else
			args = action
			$.renderer
		return [rendered.toString!]

exports.Controllers = new class Controllers extends Loader
	byId: (id)->
		obj = @out
		unless id instanceof Array then id /= '.'
		last = id.pop!
		for part of id
			obj = obj@[part]
		act = obj~[last]
		return act if act instanceof Function

	@register = (klass,id)->
		out = new klass
		for action,fn in out
			if action in klass.prototype and action not in Controller.prototype
				path = (id,action)-> ((id / '.') + [action]).join '/'
				fn <<< {
					id
					path
					renderer: Renderer path id,action
				}
		return out

	~> super Controllers.register
	run: ->super Config.controllerPath