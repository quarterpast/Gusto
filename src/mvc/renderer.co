{Config,async} = require "../main"
path = require \path
exists = (p,cb)->
	path.exists p,(e)->cb null,e

class exports.Renderer
	@subclasses = {}
	@extended = (sub)->
		@subclasses[sub.displayName.toLowerCase!] = sub
	@resolve = async (file)->
		if ext = path.extname file
			return @subclasses[ext]
				or throw Error "No template for #file"
		for ext,eng in @subclasses
			filenames = for f of ["#file/index.#ext" "#file.#ext"]
				path.join Config.templatePath,f
			if exists.sync null, filename
				return eng.compile.sync eng, filename
		throw Error "No template for #file"
	@register = (ext,thing)->
		unless thing.compile instanceof Function
			throw TypeError "#thing has no compile method"
		return class extends Renderer
			@displayName = ext
			prototype import thing
			-> super ...

	config: (@file)->
	partial: (part)->
		rel = path.resolve @file,