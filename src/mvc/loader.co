fs = require \fs
path = require \path
Sync = require \sync
{signal} = require "./signal"
{Log,async} = require "../main"


class Reloader
	reload: signal!
	(@file)~>
		@watch file, (ev,name=file)~>
			name = with path
				@join @dirname(file), @basename(name)
			@load name,@reload.~fire
	watch: (file,cb)->
		try
			fs.watch file,cb
		catch
			Log.debug "Can't use fs.watch for some reason.\n\tFalling back on fs.watchFile for #{path.basename file}"
			curr,prev <- fs.watchFile file
			if curr.mtime is not prev.mtime
				cb "change",file
	load: async (name = @file)->
		delete require.cache[path.resolve __dirname,name]
		return require name

exports.Loader = async (dir,merge = (obj,add,id)->
	obj[id] = add
)->
	out = {}
	function walk file
		stat = fs.stat.sync file
		if stat.isDirectory!
			files = fs.readdir.sync file
			walk path.join file,f for f of files
		else
			rl = Reloader file
			rl.reload.connect (e,mod)->
				@load.fire @out
				merge obj,mod,file
			@load.fire @out
			rl.load!
	walk dir