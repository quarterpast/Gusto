fs = require \fs
path = require \path
Sync = require \sync
{signal} = require "./signal"
{Log,async} = require "../main"


class Reloader
	reload: signal!
	(@file)->
		@watch file, (ev,name=file)~>
			name = with path
				@join @dirname(file), @basename(name)
			@load name,@reload.fire
	watch: (file,cb)->
		try
			fs.watch file,cb
		catch
			Log.debug "Can't use fs.watch for some reason.\n\tFalling back on fs.watchFile for #{path.basename file}"
			curr,prev <- fs.watchFile file
			if curr.mtime is not prev.mtime
				cb "change",file
	load: async (name)->
		delete require.cache[path.join __dirname,name]
		return require name

exports.Loader = async class Loader
	(dir,cb)~>
		files = fs.readdir.sync null, dir
		for file of files
			stat = fs.stat.sync null, path.join dir,file
		
			if stat.isDirectory!
				@traverse path.join dir,file
			else
				rl = new Reloader path.join dir,file
				rl.loaded.connect (initial,mod)->
					def.resolve mod if initial
				return def.promise