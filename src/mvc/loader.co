fs = require \fs
path = require \path
Sync = require \sync
{signal} = require "./signal"
{Log,async} = require "../main"


class Reloader
	reload: signal!
	(@file)~>
		@watch file, (ev,name=file)~>
			name = with path
				@join @dirname(file), @basename(name)
			@load name,@reload.~fire
	watch: (file,cb)->
		try
			fs.watch file,cb
		catch
			Log.debug "Can't use fs.watch for some reason.\n\tFalling back on fs.watchFile for #{path.basename file}"
			curr,prev <- fs.watchFile file
			if curr.mtime is not prev.mtime
				cb "change",file
	load: async (name = @file)->
		delete require.cache[path.resolve __dirname,name]
		return require name

class exports.Loader
	# recursively merge two objects
	# e.g. add({a:{b:1}},{a:{c:2}}) -> {a:{b:1,c:2}}
	function add dest,src
		for k,v in src
			if (typeof[dest[k],v]).every(->it is "object")
				add dest[k],v
			else
				dest[k] = v
		return dest

	(dir,cb)~>
		files = fs.readdir.sync null, dir
		for file of files
			res = path.join dir,file
			stat = fs.stat.sync null, res
		
			add this,if stat.isDirectory!
				Loader res,cb
			else
				rl=Reloader res
				rl.reload.connect (e,mod)~>
					cb.call this if cb?
					add this,mod
				rl.load!

			cb.call this if cb?