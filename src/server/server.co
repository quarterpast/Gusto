# server.co
# it's a server
Array::flatten = (deep=false)->
	@reduce (a,i)->
		i = i.flatten true if deep and i instanceof Array
		a.concat i
	,[]

{Config,Log,async} = require "../main"
Q = require \q
http = require \q-http
url = require \url
querystring = require \querystring
vm = require \vm
fs = require \fs
util = require \util
Sync = require \sync

{Router,Errors} = require "./router"
{Loader} = require "../mvc/loader"
{Controller} = require "../mvc/controller"
{SyncPromise} = require "./syncpromise"

class Timer
	(req)->
		@id="#{req.connection.remoteAddress} #{req.path}"
		@start = new Date
	end: ->
		@finish = new Date
		Log.log @id+": "+(@finish-@start)+"ms"

class exports.Server
	serve: (request)->
		time = new Timer request
		# request's finished, do our thing
		get = url.parse request.url,true .query
		post = if request.method is \POST and request.headers."content-length" then
			querystring.parse SyncPromise request.body.read!
		else {}

		route = @router.route request
		return status: 404,onclose: time.~end unless route

		{action,params} = route
		
		data = post <<< get <<< params

		res = action data

		{
			status: 200
			onclose: time.~end
		} <<< if \forEach in res then
			body: res
		else res
	
	(port,host)-> 
		@router = new Router
		Sync ~>
			controllers = Loader Config.controllerPath .flatten true
			Controller.prepareAll!
		Sync ~>
			@server = http.Server @~serve
			Log.log "listening on %s:#port",(host or "*")
			@server.listen port,host