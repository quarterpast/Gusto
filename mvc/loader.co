fs = require \fs
path = require \path
Q = require \q
{signal} = require "./signal.co"
{Log} = require.main.exports

class Reloader
	loaded: signal!
	(@file)->
		@load file,true
		ev,name=file <~ @watch file
		name = with path
			@join @dirname(file), @basename(name)
		@load name
	watch: (file,cb)->
		try
			fs.watch file,cb
		catch
			Log.debug "Can't use fs.watch for some reason.\n\tFalling back on fs.watchFile for #{path.basename file}"
			curr,prev <- fs.watchFile file
			if curr.mtime is not prev.mtime
				cb "change",file
	load: (name,initial = false)->
		delete require.cache[path.join __dirname,name]
		@loaded.fire initial,require name

class exports.Loader
	done: signal!
	(@dir)->
	next: (file)->
		Q.ncall fs.stat, fs, path.join @dir,file
		.then (stat)~>
			if stat.isDirectory!
				@traverse path.join @dir,file
			else
				def = Q.defer!
				rl = new Reloader path.join @dir,file
				rl.loaded.connect (initial,mod)->
					def.resolve mod if initial
				return def.promise
		.end!
	traverse: ->
		Q.ncall fs.readdir, fs, @dir
		.then (files)~>
			Q.all(@next file for file of files)